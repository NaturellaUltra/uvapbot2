import logging
import sqlite3
import datetime
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)
from openpyxl import Workbook
from io import BytesIO
from dotenv import load_dotenv
import os

load_dotenv()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

REGISTER_NAME, REGISTER_DEPARTMENT, WAIT_REASON = range(3)

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã 
ADMIN_IDS = {717329852,653756588}

#  –ù–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤ 
DEPARTMENTS = [
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –≤—ã—è–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–π",
    "–û—Ç–¥–µ–ª —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª —Å–µ–≤–µ—Ä–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª —é–∂–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª –ø—Ä–∞–≤–æ–±–µ—Ä–µ–∂–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤",
    "–û—Ç–¥–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"
]

departments_keyboard = [[KeyboardButton(dept)] for dept in DEPARTMENTS]
main_button = [[KeyboardButton("üö™ –°–æ–æ–±—â–∏—Ç—å –æ–± —É–±—ã—Ç–∏–∏ —Å —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞")]]
admin_button = [[KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")]]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("bot_data.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    full_name TEXT,
    department TEXT,
    is_admin INTEGER
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS departures (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    reason TEXT,
    timestamp DATETIME
)
""")
conn.commit()

def is_registered(user_id: int) -> bool:
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("CHAT ID:", update.effective_chat.id)
    user_id = update.effective_user.id
    if is_registered(user_id):
        cursor.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,))
        is_admin = cursor.fetchone()[0]
        keyboard = main_button.copy()
        if is_admin:
            keyboard += admin_button
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return ConversationHandler.END
    await update.message.reply_text("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á):")
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name.split()) < 3:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).")
        return REGISTER_NAME
    context.user_data["full_name"] = name
    await update.message.reply_text("‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(departments_keyboard, resize_keyboard=True))
    return REGISTER_DEPARTMENT

async def register_department(update: Update, context: ContextTypes.DEFAULT_TYPE):
    department = update.message.text
    user_id = update.effective_user.id
    full_name = context.user_data["full_name"]
    is_admin = 1 if user_id in ADMIN_IDS else 0

    cursor.execute("INSERT OR REPLACE INTO users (user_id, full_name, department, is_admin) VALUES (?, ?, ?, ?)",
                   (user_id, full_name, department, is_admin))
    conn.commit()

    keyboard = main_button.copy()
    if is_admin:
        keyboard += admin_button
        message = "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    else:
        message = "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    await update.message.reply_text(message, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ConversationHandler.END

async def handle_departure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_registered(user_id):
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return ConversationHandler.END
    await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –∫—É–¥–∞ –≤—ã —É—Ö–æ–¥–∏—Ç–µ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤ –ú–§–¶, –≤–µ—Ä–Ω—É—Å—å –≤ 14:30¬ª):")
    return WAIT_REASON


async def save_departure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    if now.weekday() >= 5 or not (9 <= now.hour < 18):
        await update.message.reply_text("‚è∞ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        return ConversationHandler.END

    user_id = update.effective_user.id
    reason = update.message.text
    timestamp = datetime.datetime.now()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO departures (user_id, reason, timestamp) VALUES (?, ?, ?)", (user_id, reason, timestamp))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT full_name, department FROM users WHERE user_id = ?", (user_id,))
    full_name, department = cursor.fetchone()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥-—Ñ–∞–π–ª
    with open("departures_log.txt", "a", encoding="utf-8") as f:
        f.write(f"[{timestamp.strftime('%Y-%m-%d %H:%M')}] {full_name} | {department} | {reason}\n")

    # üì£ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç
    NOTIFY_CHAT_ID = -1002685248701  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π chat_id
    try:
        await context.bot.send_message(
            chat_id=NOTIFY_CHAT_ID,
            text=(
                f"üì£ *–£–±—ã—Ç–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*\n"
                f"üë§ {full_name}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {department}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üïí {timestamp.strftime('%H:%M, %d.%m.%Y')}"
            ),
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = main_button.copy()
    if user_id in ADMIN_IDS:
        keyboard += admin_button

    await update.message.reply_text(
        "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
        "–û—Ç–º–µ—á–∞—Ç—å—Å—è –ø—Ä–∏ —É—Ö–æ–¥–µ –¥–æ–º–æ–π –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –Ω–µ –Ω—É–∂–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    keyboard = [
        [InlineKeyboardButton("üìÖ –î–µ–Ω—å", callback_data="day")],
        [InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data="week")],
        [InlineKeyboardButton("üìÜ –ú–µ—Å—è—Ü", callback_data="month")],
        [InlineKeyboardButton("üìä –ì–æ–¥", callback_data="year")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))


async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    period = query.data
    now = datetime.datetime.now()

    if period == "day":
        since = now.replace(hour=0, minute=1, second=0, microsecond=0)
        until = now.replace(hour=23, minute=59, second=59, microsecond=999999)
    elif period == "week":
        since = now - datetime.timedelta(days=now.weekday())
        since = since.replace(hour=0, minute=1, second=0, microsecond=0)
        until = since + datetime.timedelta(days=6, hours=23, minutes=58, seconds=59)
    elif period == "month":
        since = now.replace(day=1, hour=0, minute=1, second=0, microsecond=0)
        next_month = (since + datetime.timedelta(days=32)).replace(day=1)
        until = next_month - datetime.timedelta(seconds=1)
    elif period == "year":
        since = now.replace(month=1, day=1, hour=0, minute=1, second=0, microsecond=0)
        until = now.replace(month=12, day=31, hour=23, minute=59, second=59)
    else:
        since = now.replace(hour=0, minute=1)
        until = now

    wb = Workbook()
    ws = wb.active
    ws.title = "–û—Ç—á–µ—Ç"
    ws.append(["‚Ññ", "–§–ò–û", "–û—Ç–¥–µ–ª", "–ü—Ä–∏—á–∏–Ω–∞ —É–±—ã—Ç–∏—è", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"])

    cursor.execute("SELECT user_id, full_name, department FROM users")
    users = cursor.fetchall()

    row_num = 1
    for user in users:
        uid, name, dept = user
        cursor.execute("SELECT reason, timestamp FROM departures WHERE user_id = ? AND timestamp BETWEEN ? AND ? ORDER BY timestamp ASC", (uid, since, until))
        departs = cursor.fetchall()
        for reason, timestamp_str in departs:
            timestamp = datetime.datetime.fromisoformat(timestamp_str)
            date_str = timestamp.strftime("%d.%m.%Y")
            time_str = timestamp.strftime("%H:%M")
            ws.append([row_num, name, dept, reason, date_str, time_str])
            row_num += 1

    stream = BytesIO()
    wb.save(stream)
    stream.seek(0)
    await query.message.reply_document(document=stream, filename="report.xlsx")


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    cursor.execute("DELETE FROM departures WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("üîÅ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.", reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True))

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º. –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")







def main():
    application = ApplicationBuilder().token("7586950102:AAHQZabnuixnT8ZkNlKkxAq3ZJCQdjnku9I").build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üö™ –°–æ–æ–±—â–∏—Ç—å –æ–± —É–±—ã—Ç–∏–∏ —Å —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"), handle_departure)
        ],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REGISTER_DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_department)],
            WAIT_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_departure)]
        },
        fallbacks=[],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reset", reset))  # /reset –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Ä—É—á–Ω—É—é
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(MessageHandler(filters.Regex("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç"), report_command))
    application.add_handler(CallbackQueryHandler(generate_report))
    application.add_handler(MessageHandler(filters.ALL, unknown))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
